services:

  es-ror:
    build:
      context: .
      dockerfile: images/es/Dockerfile
      args:
        ROR_ES_REPO: $ROR_ES_REPO
        ES_VERSION: $ES_VERSION
        ROR_ES_VERSION: $ROR_ES_VERSION
    ports:
      - "9200:9200"
      - "5005:5005"
    deploy:
      resources:
        limits:
          memory: 2G # ES heap will get 1GB
    environment:
      - ES_VERSION=$ES_VERSION
      - cluster.name=elk-ror
      - node.name=elk-ror-es-node
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      # for a sake of debugging and profiling
      - "ES_JAVA_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005 -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=9010 -Dcom.sun.management.jmxremote.local.only=false -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.rmi.port=9010 -Djava.rmi.server.hostname=127.0.0.1"
      # for a sake of ROR settings marked as "<-- related to ECK environment -->"
      - KIBANA_SERVICE_ACCOUNT_TOKEN=UNUSED
      - INTERNAL_PROBE_PASS=UNUSED
      - INTERNAL_USR_PASS=UNUSED
    healthcheck:
      test: [ "CMD", "curl", "-fk", "-u", "kibana:kibana", "https://localhost:9200/_cluster/health" ]
      interval: 10s
      timeout: 10s
      retries: 30
      start_period: 60s
    networks:
      - es-ror-network
    ulimits:
      memlock:
        soft: -1
        hard: -1

  kbn-ror:
    restart: always
    build:
      context: .
      dockerfile: images/kbn/Dockerfile
      args:
        ROR_KBN_REPO: $ROR_KBN_REPO
        KBN_VERSION: $KBN_VERSION
        ROR_KBN_VERSION: $ROR_KBN_VERSION
        ROR_ACTIVATION_KEY: $ROR_ACTIVATION_KEY
    depends_on:
      es-ror:
        condition: service_healthy
    deploy:
      mode: replicated
      replicas: 2
      resources:
        limits:
          memory: 1G
    environment:
      ES_API_URL: https://es-ror:9200
    healthcheck:
      test: [ "CMD", "curl", "-k", "--fail", "-u", "kibana:kibana", "https://localhost:5601/api/status" ]
      interval: 10s
      timeout: 10s
      retries: 30
      start_period: 60s
    networks:
      - es-ror-network
    ulimits:
      memlock:
        soft: -1
        hard: -1

  kbn-proxy:
    build:
      context: .
      dockerfile: images/kbn/Proxy-Dockerfile
    depends_on:
      kbn-ror:
        condition: service_healthy
    ports:
      - "5601:443"
    healthcheck:
      test: [ "CMD", "curl", "-k", "--fail", "-u", "kibana:kibana", "https://localhost:443/api/status" ]
      interval: 10s
      timeout: 10s
      retries: 30
      start_period: 60s
    networks:
      - es-ror-network

  apm-server:
    build:
      context: .
      dockerfile: images/apm/Dockerfile
      args:
        ES_VERSION: $ES_VERSION
    ports:
      - "8200:8200"
    volumes:
      - ./certs:/usr/share/apm-server/config/certs:z
    depends_on:
      es-ror:
        condition: service_healthy
    networks:
      - es-ror-network
    deploy:
      resources:
        limits:
          memory: 1G
    healthcheck:
      test: [ "CMD", "curl", "-k", "--fail", "https://localhost:8200" ]
      interval: 10s
      timeout: 5s
      retries: 3

  node-apm-app:
    build:
      context: ../common/images/node-apm-app/
      dockerfile: Dockerfile
    environment:
      APM_URL: https://apm-server:8200
    depends_on:
      apm-server:
        condition: service_healthy
    expose:
      - 3000
    ports:
      - "3000:3000"
    volumes:
      - ./certs:/example-app/certs:z
    networks:
      - es-ror-network
    deploy:
      resources:
        limits:
          memory: 128MB
    healthcheck:
      test: [ "CMD", "curl", "-k", "--fail", "https://apm-server:8200" ]
      interval: 10s
      timeout: 5s
      retries: 3
networks:
  es-ror-network:
    driver: bridge
